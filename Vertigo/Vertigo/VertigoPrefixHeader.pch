//
//  VertigoPrefixHeader.pch
//  Vertigo
//
//  Created by Evan Long on 1/9/17.
//
//

#ifndef VertigoPrefixHeader_pch
#define VertigoPrefixHeader_pch

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>

// Helpers
#ifndef ISA
    #define ISA(object, __class__) [object isKindOfClass:[__class__ class]]
#endif

#ifndef VTKeyPath
    #define VTKeyPath(object, keyPath) (YES ? @#keyPath : ((void)object.keyPath, @""))
#endif

#ifndef VTAllowAutolayoutForView
    #define VTAllowAutolayoutForView(view) view.translatesAutoresizingMaskIntoConstraints = NO
#endif

#ifndef VTUnavailableInitializer
    #define VTUnavailableInitializer [NSException raise:NSInternalInconsistencyException format:@"%s is not a valid initializer", __PRETTY_FUNCTION__]; return nil
#endif

// OS Compatibility
#ifndef VTOSAtLeast
    #define VTOSAtLeast(major,minor,patch) [[NSProcessInfo processInfo] isOperatingSystemAtLeastVersion:(NSOperatingSystemVersion){major,minor,patch}]
#endif

// isEqual helpers
#ifndef VTEqualityPossibleCheck
    // Returns YES or NO if equality is certain or not possible. Allows execution to continue if equality is unknown but possible
    #define VTEqualityPossibleCheck(current, other, class) if (current == other) return YES; if (!ISA(other, class)) return NO
#endif

#ifndef VTObjectValuePropertiesAreEqual
    // Check that two values are equal
    #define VTObjectValuePropertiesAreEqual(current, other, ivarName) (current->ivarName == other->ivarName)
#endif

#ifndef VTObjectReferencePropertiesAreEqual
    // Check two object properties are equal including cases where both values are nil
    #define VTObjectReferencePropertiesAreEqual(current, other, ivarName) (VTObjectValuePropertiesAreEqual(current, other, ivarName) || [current->ivarName isEqual:other->ivarName])
#endif

// Logging
#ifndef VTLog
    #if DEBUG
        #define VTLog NSLog
        #define VTLogObject(object) NSLog(@"%s = %@", #object, object)
        #define VTLogFunction NSLog(@"%s", __PRETTY_FUNCTION__)
        #define VTLogFunctionMsg(msg) NSLog(@"%s - %@", __PRETTY_FUNCTION__, msg)
        #define VTLogFunctionWithObject(object) NSLog(@"%s - %s = %@", __PRETTY_FUNCTION__, #object, object)
    #else
        #define VTLog
        #define VTLogObject(object)
        #define VTLogFunction
        #define VTLogFunctionMsg(msg)
        #define VTLogFunctionWithObject(object)
    #endif
#endif

// Visual Debugging
#ifndef VTSetBorderColor
    #define VTSetBorder(view, color, width) view.layer.borderColor = [UIColor color].CGColor; view.layer.borderWidth = width
#endif

#endif /* VertigoPrefixHeader_pch */
